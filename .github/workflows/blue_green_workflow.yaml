name: Blue/Green Deployment Workflow

on:
  release:
    types:
      - published
  #push:
  #  branches:
  #    - main
  workflow_dispatch:

env:
  CLUSTER_NAME: snocko-demo-cluster # Change to your cluster name
  REGION: '${{ secrets.AWS_REGION }}'

jobs:

  promote:
    runs-on: ubuntu-latest
    name: Argo-rollouts Promote
    steps:
      - name: Initial AWS Account
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Configure Kubectl
        uses: azure/setup-kubectl@v3
        id: install 
        with:
          version: 'v1.23.6'   
      - name: Update KubeConfig
        continue-on-error: true
        run: |
          aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME
      - name: argo-rollouts plugin install 
        id: argo_rollouts_plugin_install
        run: |
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
          kubectl argo rollouts version
      - name: argocd cli install 
        id: argocd_cli_install
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
      - name: get argocd login
        run: |
          kubectl config set-context --current --namespace=argocd
      - name: get argocd server
        run: |
          argocd login --core
      - name: argocd get application
        continue-on-error: true
        run: |
          argocd app get $(argocd app list --output name)
      - name: argocd sync application
        id: argocd_sync
        run: |
          argocd app sync $(argocd app list --output name) --assumeYes
      - name: List rollouts
        continue-on-error: true
        run: kubectl argo rollouts list rollouts --all-namespaces
      - name: Get rollouts
        continue-on-error: true
        run: |
          export ROLLOUT_NAME=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $2}')
          export NAMESPACES=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $1}')
          kubectl argo rollouts get rollouts --namespace $NAMESPACES $ROLLOUT_NAME
      - name: Get status 60s
        continue-on-error: true
        run: |
          export ROLLOUT_NAME=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $2}')
          export NAMESPACES=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $1}')
          kubectl argo rollouts status --timeout 60s --namespace $NAMESPACES $ROLLOUT_NAME
      - name: Promote rollouts
        run: |
          export ROLLOUT_NAME=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $2}')
          export NAMESPACES=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $1}')
          kubectl argo rollouts promote $ROLLOUT_NAME -n $NAMESPACES
      - name: Get rollouts status
        continue-on-error: true
        run: |
          export ROLLOUT_NAME=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $2}')
          export NAMESPACES=$(kubectl argo rollouts list rollouts --all-namespaces | awk -F'|' 'FNR>1{print $1}' | awk '{print $1}')
          kubectl argo rollouts get rollouts --namespace $NAMESPACES $ROLLOUT_NAME